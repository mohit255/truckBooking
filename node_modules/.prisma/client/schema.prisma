generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model City {
  id                           Int       @id @default(autoincrement())
  name                         String    @unique
  state                        String?
  isActive                     Boolean   @default(true)
  createdAt                    DateTime  @default(now())
  updatedAt                    DateTime  @updatedAt
  destinationBookings          Booking[] @relation("BookingDestinationCity")
  sourceBookings               Booking[] @relation("BookingSourceCity")
  preferredDestinationVehicles Vehicle[] @relation("VehiclePreferredDestinationCity")
  preferredSourceVehicles      Vehicle[] @relation("VehiclePreferredSourceCity")
}

model Vehicle {
  id                              Int         @id @default(autoincrement())
  vehicleNumber                   String      @unique
  vehicleType                     VehicleType
  ownerName                       String
  ownerContact                    String
  isActive                        Boolean     @default(true)
  createdAt                       DateTime    @default(now())
  updatedAt                       DateTime    @updatedAt
  preferredRouteDestinationCityId Int?
  preferredRouteSourceCityId      Int?
  firm                            String?
  bookings                        Booking[]
  preferredRouteDestinationCity   City?       @relation("VehiclePreferredDestinationCity", fields: [preferredRouteDestinationCityId], references: [id])
  preferredRouteSourceCity        City?       @relation("VehiclePreferredSourceCity", fields: [preferredRouteSourceCityId], references: [id])

  @@index([preferredRouteDestinationCityId], map: "Vehicle_preferredRouteDestinationCityId_fkey")
  @@index([preferredRouteSourceCityId], map: "Vehicle_preferredRouteSourceCityId_fkey")
}

model Booking {
  id                Int           @id @default(autoincrement())
  bookingDate       DateTime      @default(now())
  partyName         String
  partyContact      String?
  requestedVehicle  VehicleType
  vehicleId         Int?
  malikName         String?
  malikRate         Decimal       @db.Decimal(10, 2)
  partyRate         Decimal       @db.Decimal(10, 2)
  commission        Decimal       @db.Decimal(10, 2)
  status            BookingStatus @default(PENDING)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  destinationCityId Int?
  sourceCityId      Int?
  dropAddress       String?
  pickupAddress     String?
  notes             String?
  destinationCity   City?         @relation("BookingDestinationCity", fields: [destinationCityId], references: [id])
  sourceCity        City?         @relation("BookingSourceCity", fields: [sourceCityId], references: [id])
  vehicle           Vehicle?      @relation(fields: [vehicleId], references: [id])
  payment           Payment?

  @@index([destinationCityId], map: "Booking_destinationCityId_fkey")
  @@index([sourceCityId], map: "Booking_sourceCityId_fkey")
  @@index([vehicleId], map: "Booking_vehicleId_fkey")
}

model Payment {
  id                 Int           @id @default(autoincrement())
  bookingId          Int           @unique
  totalFromParty     Decimal       @db.Decimal(10, 2)
  paidByParty        Decimal       @default(0.00) @db.Decimal(10, 2)
  amountPayableMalik Decimal       @db.Decimal(10, 2)
  paidToMalik        Decimal       @default(0.00) @db.Decimal(10, 2)
  commissionEarned   Decimal       @db.Decimal(10, 2)
  paymentStatus      PaymentStatus @default(PARTY_PENDING)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  booking            Booking       @relation(fields: [bookingId], references: [id])
}

enum VehicleType {
  CONTAINER_32FT
  OPEN_20FT
  OPEN_22FT
  TRAILER
  OTHER
}

enum BookingStatus {
  PENDING
  IN_TRANSIT
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  ALL_PAID
  PARTY_PENDING
  MALIK_PENDING
}
